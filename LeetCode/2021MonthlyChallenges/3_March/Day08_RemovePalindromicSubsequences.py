#Remove Palindromic Subsequences
'''
Given a string s consisting only of letters 'a' and 'b'. In a single step you can remove one palindromic subsequence from s.
Return the minimum number of steps to make the given string empty.
A string is a subsequence of a given string, if it is generated by deleting some characters of a given string without changing its order.
A string is called palindrome if is one that reads the same backward as well as forward.

Example:
    Input: s = "ababa"
    Output: 1
    Explanation: String is already palindrome
    
    Input: s = "baabb"
    Output: 2
    Explanation: "baabb" -> "b" -> "". 
                 Remove palindromic subsequence "baab" then "b".

Solution:
A subsequence is a set of characters from a string that does not need to be consecutive.
Thus, there are 3 possible outcomes for this problem.
    If the string is empty, return 0
    If the string is a palindrome, return 1 (s == s[::-1])
    Otherwise, we first remove all the a's in the string, then all the b's, so we return 2.
'''

class Solution:
    def removePalindromeSub(self, s: str) -> int:
        if s=='':
            return 0
        elif s==s[::-1]:
            return 1
        else:
            return 2
